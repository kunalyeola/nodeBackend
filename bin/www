const env = require("dotenv");
env.config({ path: process.env.NODE_ENV === "production" ? ".env" : ".env.development" });
const app = require("../app");
const debug = require("debug")("newboiler:server");
const http = require("http");
// require("../helpers/database");
// const fs = require("fs");
// const https = require("https");

const port = normalizePort(process.env.API_PORT || "6003");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
// const httpsServer = https.createServer(credentials, app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
// httpsServer.listen(process.env.SSL_API_PORT);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  // eslint-disable-next-line radix
  const portNum = parseInt(val, 10);

  if (isNaN(portNum)) {
    // named pipe
    return val;
  }

  if (portNum >= 0) {
    // port number
    return portNum;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string"
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      // eslint-disable-next-line no-console
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      // eslint-disable-next-line no-console
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  // eslint-disable-next-line no-console
  console.log(process.env.API_HOST);
  console.log(`Listening on ${process.env.API_HOST}:${addr.port}`);
  // eslint-disable-next-line no-console
  // console.log(`Listening on ${process.env.SSL_API_HOST}:${httpsServer.address().port}`);
}
